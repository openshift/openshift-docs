# Report extra examples inside of procedure modules.
---
extends: script
message: "Examples are allowed only once in DITA tasks."
level: error
scope: raw
script: |
  text               := import("text")
  matches            := []

  r_admonition_block := text.re_compile("^\\[(?:NOTE|TIP|IMPORTANT|WARNING|CAUTION)\\][ \\t]*$")
  r_block_title      := text.re_compile("^\\.{1,2}[^ \\t.].*$")
  r_comment_block    := text.re_compile("^/{4,}\\s*$")
  r_comment_line     := text.re_compile("^(//|//[^/].*)$")
  r_code_block       := text.re_compile("^(?:\\.{4,}|-{4,})[ \\t]*$")
  r_conditional      := text.re_compile("^(?:ifn?def|ifeval|endif)::\\S*\\[.*\\][ \\t]*$")
  r_content_type     := text.re_compile("^:_(?:mod-docs-content|content|module)-type:[ \\t]+(?i:procedure)")
  r_empty_line       := text.re_compile("^[ \\t]*$")
  r_example_block    := text.re_compile("^\\[example\\][ \\t]*$")
  r_example_delim    := text.re_compile("^={4,}[ \\t]*$")
  r_list_continue    := text.re_compile("^\\+[ \\t]*$")

  document           := text.split(text.trim_suffix(scope, "\n"), "\n")

  expect_admonition  := false
  in_comment_block   := false
  in_code_block      := false
  in_example_block   := false
  is_procedure       := false
  count              := 0
  start              := 0
  end                := 0

  for line in document {
    start += end
    end    = len(line) + 1

    if r_comment_block.match(line) {
      delimiter := text.trim_space(line)
      if ! in_comment_block {
        in_comment_block = delimiter
      } else if in_comment_block == delimiter {
        in_comment_block = false
      }
      continue
    }
    if in_comment_block { continue }
    if r_comment_line.match(line) { continue }

    if r_code_block.match(line) {
      delimiter := text.trim_space(line)
      if ! in_code_block {
        in_code_block = delimiter
      } else if in_code_block == delimiter {
        in_code_block = false
      }
      continue
    }
    if in_code_block { continue }

    if r_conditional.match(line) { continue }
    if r_empty_line.match(line) { continue }

    if r_content_type.match(line) {
      is_procedure = true
      continue
    }

    if r_admonition_block.match(line) {
      expect_admonition = true
      continue
    }

    if expect_admonition {
      if r_block_title.match(line) || r_list_continue.match(line) {
        continue
      }
    }

    if r_example_delim.match(line) {
      delimiter := text.trim_space(line)
      if ! in_example_block {
        in_example_block = delimiter

        if expect_admonition {
          expect_admonition = false
          continue
        }

        count++

        if count > 1 {
          matches = append(matches, {begin: start, end: start + end - 1})
        }
      } else if in_example_block == delimiter {
        in_example_block = false
      }
      continue
    }

    if r_example_block.match(line) {
      count++

      if count > 1 {
        matches = append(matches, {begin: start, end: start + end - 1})
      }

      continue
    }

    expect_admonition = false
  }

  if ! is_procedure {
    matches = []
  }
