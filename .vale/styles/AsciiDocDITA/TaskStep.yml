# Report content other than steps in procedures.
---
extends: script
message: "Content other than a single list cannot be mapped to DITA tasks."
level: warning
scope: raw
script: |
  text              := import("text")
  matches           := []

  r_any_title       := text.re_compile("^\\.{1,2}[^ \\t.].*$")
  r_attribute_list  := text.re_compile("^\\[(?:|[\\w.#%{,\"'].*)\\][ \\t]*$")
  r_attribute       := text.re_compile("^:!?\\S[^:]*:")
  r_comment_block   := text.re_compile("^/{4,}\\s*$")
  r_comment_line    := text.re_compile("^(//|//[^/].*)$")
  r_conditional     := text.re_compile("^(?:ifn?def|ifeval|endif)::\\S*\\[.*\\][ \\t]*$")
  r_content_type    := text.re_compile("^:_(?:mod-docs-content|content|module)-type:[ \\t]+(?i:procedure)")
  r_dlist           := text.re_compile("^[ \\t]*\\S.*?(?::{2,4}|;;)(?:|[ \\t]+.*)$")
  r_empty_line      := text.re_compile("^[ \\t]*$")
  r_list_continue   := text.re_compile("^\\+[ \\t]*$")
  r_other_block     := text.re_compile("^(?:\\.{4,}|-{4,}|={4,}|-{2})[ \\t]*$")
  r_procedure       := text.re_compile("^(?:={2,}[ \\t]+|\\.{1,2})Procedure[ \\t]*$")
  r_step            := text.re_compile("^[ \\t]*[\\*-.]+[ \\t]+\\S.*$")
  r_supported_title := text.re_compile("^\\.{1,2}(?:Prerequisites?|Procedure|Verification|Results?|Troubleshooting|Troubleshooting steps?|Next steps?|Additional resources)[ \\t]*$")

  document          := text.split(text.trim_suffix(scope, "\n"), "\n")

  is_procedure_mod  := false
  in_comment_block  := false
  in_continue       := false
  in_list           := false
  in_other_block    := false
  in_procedure      := false
  in_step           := false
  start             := 0
  end               := 0

  for line in document {
    start += end
    end    = len(line) + 1

    if r_comment_block.match(line) {
      delimiter := text.trim_space(line)
      if ! in_comment_block {
        in_comment_block = delimiter
      } else if in_comment_block == delimiter {
        in_comment_block = false
      }
      continue
    }
    if in_comment_block { continue }
    if r_comment_line.match(line) { continue }

    if r_content_type.match(line) {
      is_procedure_mod = true
      continue
    }

    if r_attribute.match(line) { continue }
    if r_attribute_list.match(line) { continue }
    if r_conditional.match(line) { continue }

    if r_procedure.match(line) {
      in_procedure = true
      continue
    }

    if ! in_procedure { continue }

    if r_supported_title.match(line) { break }
    if r_any_title.match(line) { continue }

    if in_step {
      if r_other_block.match(line) {
        delimiter := text.trim_space(line)
        if ! in_other_block {
          in_other_block = delimiter
        } else if in_other_block == delimiter {
          in_other_block = false
          in_continue = false
        }
        continue
      }
      if in_other_block { continue }
    }

    if r_empty_line.match(line) {
      if ! in_continue {
        in_step = false
      }
      continue
    }

    if r_list_continue.match(line) {
      in_continue = true
      in_step = true
      continue
    } else {
      in_continue = false
    }

    if r_step.match(line) {
      in_list = true
      in_step = true
      continue
    }

    if in_list && r_dlist.match(line) {
      in_step = true
      continue
    }

    if in_step { continue }

    matches = append(matches, {begin: start, end: start + end - 1})

    if in_list { break }
  }

  if ! is_procedure_mod {
    matches = []
  }
