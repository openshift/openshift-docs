# Report text outside of links in additional resources.
---
extends: script
message: "Content other than links cannot be mapped to DITA related-links."
level: warning
scope: raw
script: |
  text              := import("text")
  matches           := []

  r_add_resources   := text.re_compile("^(?:={2,}[ \\t]+|\\.{1,2})Additional resources[ \\t]*$")
  r_any_title       := text.re_compile("^(?:={2,}[ \\t]+|\\.{1,2})[^ \\t.].*$")
  r_attribute_list  := text.re_compile("^\\[(?:|[\\w.#%{,\"'].*)\\][ \\t]*$")
  r_attribute       := text.re_compile("^:!?\\S[^:]*:")
  r_comment_block   := text.re_compile("^/{4,}\\s*$")
  r_comment_line    := text.re_compile("^(//|//[^/].*)$")
  r_conditional     := text.re_compile("^(?:ifn?def|ifeval|endif)::\\S*\\[.*\\][ \\t]*$")
  r_content_type    := text.re_compile("^:_(?:mod-docs-content|content|module)-type:[ \\t]+(?i:assembly)")
  r_empty_line      := text.re_compile("^[ \\t]*$")
  r_include         := text.re_compile("^include::(?:[^ \\t\\[]|[^[]*[^ \\t\\[])\\[.*\\][ \\t]*$")
  r_inline_link     := text.re_compile("^[ \\t]*[\\*-][ \\t]+(?:|link:|<)(?:|\\+\\+)(?:https?|file|ftp|irc)://[^ \\t\\[\\]]+(?:|\\+\\+)(?:|\\[.*?\\])>?[ \\t]*$")
  r_inline_xref     := text.re_compile("^[ \\t]*[\\*-][ \\t]+<<[A-Za-z0-9/.:{].*?>>[ \\t]*$")
  r_link_macro      := text.re_compile("^[ \\t]*[\\*-][ \\t]+(?:link|mailto):(?:|[^: \\t\\[][^: \\t\\[]*)\\[.*?\\][ \\t]*$")
  r_role_attribute  := text.re_compile("^\\[role=['\\x22]_additional-resources['\\x22]\\][ \\t]*$")
  r_xref_macro      := text.re_compile("^[ \\t]*[\\*-][ \\t]+xref:[A-Za-z0-9/.:{].*?\\[.*?\\][ \\t]*$")

  document          := text.split(text.trim_suffix(scope, "\n"), "\n")

  is_assembly       := false
  in_comment_block  := false
  in_add_resources  := false
  start             := 0
  end               := 0

  for line in document {
    start += end
    end    = len(line) + 1

    if r_comment_block.match(line) {
      delimiter := text.trim_space(line)
      if ! in_comment_block {
        in_comment_block = delimiter
      } else if in_comment_block == delimiter {
        in_comment_block = false
      }
      continue
    }
    if in_comment_block { continue }
    if r_comment_line.match(line) { continue }

    if r_content_type.match(line) {
      is_assembly = true
      continue
    }

    if r_empty_line.match(line) { continue }
    if r_attribute.match(line) { continue }
    if r_conditional.match(line) { continue }

    if r_attribute_list.match(line) && r_role_attribute.match(line) {
      continue
    }

    if r_include.match(line) && is_assembly {
      continue
    }

    if r_add_resources.match(line) {
      in_add_resources = true
      continue
    }

    if ! in_add_resources { continue }

    if r_any_title.match(line) {
      in_add_resources = false
      continue
    }

    if r_link_macro.match(line) || r_inline_link.match(line) ||
       r_xref_macro.match(line) || r_inline_xref.match(line) {
      continue
    }

    matches = append(matches, {begin: start, end: start + end - 1})
  }
