# Report unsupported example blocks.
---
extends: script
message: "Examples can not be inside of other blocks in DITA."
level: error
scope: raw
script: |
  text               := import("text")
  matches            := []

  r_admonition_block := text.re_compile("^\\[(?:NOTE|TIP|IMPORTANT|WARNING|CAUTION)\\][ \\t]*$")
  r_attribute        := text.re_compile("^:!?\\S[^:]*:")
  r_block_title      := text.re_compile("^\\.{1,2}[^ \\t.].*$")
  r_code_block       := text.re_compile("^(?:\\.{4,}|-{4,})[ \\t]*$")
  r_comment_block    := text.re_compile("^/{4,}\\s*$")
  r_comment_line     := text.re_compile("^(//|//[^/].*)$")
  r_conditional      := text.re_compile("^(?:ifn?def|ifeval|endif)::\\S*\\[.*\\][ \\t]*$")
  r_empty_line       := text.re_compile("^[ \\t]*$")
  r_example_block    := text.re_compile("^\\[example\\][ \\t]*$")
  r_example_delim    := text.re_compile("^={4,}[ \\t]*$")
  r_list_continue    := text.re_compile("^\\+[ \\t]*$")
  r_list_item        := text.re_compile("^[ \\t]*[\\*-.]+[ \\t]+\\S.*$")
  r_other_block      := text.re_compile("^(?:\\*{4,}|-{2})[ \\t]*$")
  r_section          := text.re_compile("^={2,}[ \\t]\\S.*$")

  document           := text.split(text.trim_suffix(scope, "\n"), "\n")

  in_comment_block   := false
  in_example_block   := false
  in_code_block      := false
  in_other_block     := false
  in_section         := false
  in_list            := false
  in_continue        := false
  expect_admonition  := false
  start              := 0
  end                := 0

  for line in document {
    start += end
    end    = len(line) + 1

    if r_comment_block.match(line) {
      delimiter := text.trim_space(line)
      if ! in_comment_block {
        in_comment_block = delimiter
      } else if in_comment_block == delimiter {
        in_comment_block = false
      }
      continue
    }
    if in_comment_block { continue }
    if r_comment_line.match(line) { continue }

    if r_code_block.match(line) {
      delimiter := text.trim_space(line)
      if ! in_code_block {
        in_code_block = delimiter
      } else if in_code_block == delimiter {
        in_code_block = false
      }
      in_continue = false
      continue
    }
    if in_code_block { continue }

    if r_attribute.match(line) { continue }
    if r_conditional.match(line) { continue }

    if r_example_delim.match(line) {
      delimiter := text.trim_space(line)
      if ! in_example_block {
        in_example_block = delimiter

        if expect_admonition { continue }

        if in_section || in_other_block || in_list {
          matches = append(matches, {begin: start, end: start + end - 1})
        }
      } else if in_example_block == delimiter {
        in_example_block = false
      }
      in_continue = false
      continue
    }

    if r_empty_line.match(line) {
      if ! in_continue {
        in_list = false
      }
      continue
    }

    if r_list_continue.match(line) {
      in_continue = true
      in_list = true
      continue
    } else {
      in_continue = false
    }

    if r_block_title.match(line) && expect_admonition {
      if in_continue {
        in_continue = false
      }
      continue
    }

    if r_list_item.match(line) {
      in_list = true
      continue
    }

    if r_admonition_block.match(line) {
      expect_admonition = true
      continue
    }

    if r_section.match(line) {
      in_section = true
      continue
    }

    if r_example_block.match(line) {
      if in_section || in_other_block || in_list {
        matches = append(matches, {begin: start, end: start + end - 1})
      }
      continue
    }

    if r_other_block.match(line) {
      delimiter := text.trim_space(line)
      if ! in_other_block {
        in_other_block = delimiter
      } else if in_other_block == delimiter {
        in_other_block = false
      }
      continue
    }

    expect_admonition = false
  }
