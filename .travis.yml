language: python
cache:
  pip: true

git:
  depth: 10
jobs:
  include:
    - name: "Preview, validate, and build"
      before_install:
        - chmod +x autopreview.sh
        - ./autopreview.sh
      install:
        - gem install --local _gemfiles/asciidoctor-2.0.20.gem _gemfiles/asciidoctor-diagram-plantuml-1.2023.10.gem _gemfiles/asciidoctor-diagram-ditaamini-1.0.3.gem _gemfiles/rexml-3.2.6.gem _gemfiles/asciidoctor-diagram-2.2.14.gem _gemfiles/rouge-4.1.3.gem
        - pip3 install pyyaml aura.tar.gz
      script:
        # Fail if Asciidoctor encounters errors. Pass otherwise. Then, build updated distros
        - chmod +x ./scripts/check-asciidoctor-build.sh
        - chmod +x ./scripts/get-updated-distros.sh
        - ./scripts/check-asciidoctor-build.sh || travis_terminate 1
        - |
          ./scripts/get-updated-distros.sh |
            while read -r filename; do
              case "$filename" in
                "_topic_maps/_topic_map.yml")
                  distro="openshift-enterprise"
                  product="OpenShift Container Platform"
                  version="4.14"
                  ;;
                "_topic_maps/_topic_map_osd.yml")
                  distro="openshift-dedicated"
                  product="OpenShift Dedicated"
                  version="4"
                  ;;
                "_topic_maps/_topic_map_ms.yml")
                  distro="microshift"
                  product="Microshift"
                  version="4"
                  ;;
                "_topic_maps/_topic_map_rosa.yml")
                  distro="openshift-rosa"
                  product="Red Hat OpenShift Service on AWS"
                  version="4"
                  ;;
                "_distro_map.yml")
                  distro="openshift-enterprise"
                  product="OpenShift Container Platform"
                  version="4.14"
                  ;;
                *)
                  echo "Error: Unrecognized filename: $filename" >&2
                  exit 1
                  ;;
              esac
              python3 build_for_portal.py --distro "$distro" --product "$product" --version "$version" --no-upstream-fetch
              if [ $? -ne 0 ]; then travis_terminate 1; fi
            done
        - if [ -d "drupal-build" ]; then python3 makeBuild.py || travis_terminate 1; fi
