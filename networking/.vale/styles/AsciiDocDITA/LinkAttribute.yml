# Report links that contain an attribute reference.
---
extends: script
message: "Attribute references inside of links cannot be converted to DITA."
level: warning
link: https://github.com/jhradilek/asciidoctor-dita-vale/blob/main/README.md#warnings
scope: raw
script: |
  text               := import("text")
  matches            := []

  r_attribute_ref    := text.re_compile("\\{(?:[0-9A-Za-z_][0-9A-Za-z_-]*|set:.+?|counter2?:.+?)\\}")
  r_code_block       := text.re_compile("^(?:\\.{4,}|-{4,})[ \\t]*$")
  r_comment_line     := text.re_compile("^(//|//[^/].*)$")
  r_comment_block    := text.re_compile("^/{4,}\\s*$")
  r_complete_link    := text.re_compile("(?:|link:)(?:|\\+\\+)(?:https?|file|ftp|irc)://[^\\s\\[\\]]*(\\{(?:[0-9A-Za-z_][0-9A-Za-z_-]*|set:.+?|counter2?:.+?)\\})[^\\s\\[\\]]*(?:|\\+\\+)(?:|\\[.*?\\])")
  r_domain_markup    := text.re_compile("(?:https?|file|ftp|irc):///?[_*`#~^][^_*`#~^]*?[_*`#~^]")
  r_incomplete_link  := text.re_compile("link:(?:|\\+\\+)\\{(?:[0-9A-Za-z_][0-9A-Za-z_-]*|set:.+?|counter2?:.+?)\\}[^\\s\\[\\]]*(?:|\\+\\+)(?:|\\[.*?\\])")

  document           := text.split(text.trim_suffix(scope, "\n"), "\n")

  in_code_block      := false
  in_comment_block   := false
  start              := 0
  end                := 0

  for line in document {
    start += end
    end    = len(line) + 1

    if r_comment_block.match(line) {
      delimiter := text.trim_space(line)
      if ! in_comment_block {
        in_comment_block = delimiter
      } else if in_comment_block == delimiter {
        in_comment_block = false
      }
      continue
    }
    if in_comment_block { continue }
    if r_comment_line.match(line) { continue }

    if r_code_block.match(line) {
      delimiter := text.trim_space(line)
      if ! in_code_block {
        in_code_block = delimiter
      } else if in_code_block == delimiter {
        in_code_block = false
      }
      continue
    }
    if in_code_block { continue }

    for i, entry in r_complete_link.find(line, -1) {
      if (text.has_prefix(text.substr(line, entry[1].begin - 1, entry[1].begin), '$')) {
        continue
      }

      link := entry[0]
      if (link.begin > 0) && text.has_prefix(text.substr(line, link.begin - 1, link.begin), '\\') {
        continue
      }
      if r_domain_markup.match(r_attribute_ref.replace(link.text, "")) {
        continue
      }

      matches = append(matches, {begin: start + entry[0].begin, end: start + entry[0].end -1})
    }

    for i, entry in r_incomplete_link.find(line, -1) {
      link := entry[0]
      if (link.begin > 0) && text.has_prefix(text.substr(line, link.begin - 1, link.begin), '\\') {
        continue
      }

      matches = append(matches, {begin: start + entry[0].begin, end: start + entry[0].end -1})
    }
  }
